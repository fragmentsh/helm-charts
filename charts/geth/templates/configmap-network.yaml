apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "geth.fullname" . }}-config-network
  labels:
  {{- include "geth.labels" . | nindent 4 }}
data:
  network.sh: |-
    #!/usr/bin/env bash
    set -x
    function valid_ip()
    {
        local  ip=$1
        local  stat=1

        if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            OIFS=$IFS
            IFS='.'
            ip=($ip)
            IFS=$OIFS
            [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
                && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
            stat=$?
        fi
        return $stat
    }

    case $( arch ) in
    x86_64 ) ARCH="amd64";;
    aarch64 ) ARCH="arm64";;
    *    ) ARCH="other";;
    esac

    echo $ARCH

    IP=$(curl -s https://checkip.amazonaws.com/)
    while ! valid_ip $IP
    do
      echo "Retrying to fetch external IP address from checkip.amazonaws.com"
      IP=$(curl -s https://checkip.amazonaws.com/)
      sleep 5
    done

    IFS=. read IP1 IP2 IP3 IP4 <<< "$IP"

    cat <<EOF > /shared/config.toml
    [Node]
    [Node.P2P]
    NAT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, $IP1, $IP2, $IP3, $IP4]
    EOF

    cat /shared/config.toml
